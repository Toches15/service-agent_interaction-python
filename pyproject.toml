[project]
name = "app-template"
version = "0.1.0"
description = "Basic FastAPI app template."
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "agno>=2.1.6",
    "aiosqlite>=0.21.0",
    "asyncpg>=0.30.0",
    "fastapi>=0.119.0",
    "greenlet>=3.2.4",
    "openai>=2.4.0",
    "psycopg2-binary>=2.9.11",
    "pydantic-settings>=2.11.0",
    "sqlmodel>=0.0.27",
    "uvicorn[standard]>=0.30.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-html>=4.1.1",
    "pytest-xdist>=3.8.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "httpx>=0.24.0",
]

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.pylint.messages_control]
disable = [
    "logging-fstring-interpolation", 
    "line-too-long", 
    "broad-exception-caught", 
    "no-self-argument", 
    "f-string-without-interpolation",
    "import-outside-toplevel"
]

[tool.mypy]
python_version = "3.12"
# Relaxed settings for template - users can make stricter later
ignore_missing_imports = true
disallow_untyped_defs = false
warn_return_any = false
warn_unused_configs = false
check_untyped_defs = false
no_implicit_optional = false
strict_optional = false

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-html>=4.1.1",
    "pytest-xdist>=3.8.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "httpx>=0.24.0",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov-report=term-missing",
    "--cov-branch",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
